// Code generated by "enumer -type=RSPCODE -linecomment"; DO NOT EDIT.

package msg

import (
	"fmt"
	"strings"
)

const _RSPCODEName = "RspCode_SuccessRspCode_Fail"

var _RSPCODEIndex = [...]uint8{0, 15, 27}

const _RSPCODELowerName = "rspcode_successrspcode_fail"

func (i RSPCODE) String() string {
	if i < 0 || i >= RSPCODE(len(_RSPCODEIndex)-1) {
		return fmt.Sprintf("RSPCODE(%d)", i)
	}
	return _RSPCODEName[_RSPCODEIndex[i]:_RSPCODEIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RSPCODENoOp() {
	var x [1]struct{}
	_ = x[RspCode_Success-(0)]
	_ = x[RspCode_Fail-(1)]
}

var _RSPCODEValues = []RSPCODE{RspCode_Success, RspCode_Fail}

var _RSPCODENameToValueMap = map[string]RSPCODE{
	_RSPCODEName[0:15]:       RspCode_Success,
	_RSPCODELowerName[0:15]:  RspCode_Success,
	_RSPCODEName[15:27]:      RspCode_Fail,
	_RSPCODELowerName[15:27]: RspCode_Fail,
}

var _RSPCODENames = []string{
	_RSPCODEName[0:15],
	_RSPCODEName[15:27],
}

// RSPCODEString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RSPCODEString(s string) (RSPCODE, error) {
	if val, ok := _RSPCODENameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RSPCODENameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RSPCODE values", s)
}

// RSPCODEValues returns all values of the enum
func RSPCODEValues() []RSPCODE {
	return _RSPCODEValues
}

// RSPCODEStrings returns a slice of all String values of the enum
func RSPCODEStrings() []string {
	strs := make([]string, len(_RSPCODENames))
	copy(strs, _RSPCODENames)
	return strs
}

// IsARSPCODE returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RSPCODE) IsARSPCODE() bool {
	for _, v := range _RSPCODEValues {
		if i == v {
			return true
		}
	}
	return false
}
