// Code generated by "enumer -type=MSGID -linecomment"; DO NOT EDIT.

package msg

import (
	"fmt"
	"strings"
)

const _MSGIDName = "MSG_STARTMSG_PINGMSG_PONGMSG_HANDSHAKEMSG_REGISTERROUTERMSG_SNAPSHOTSUBSMSG_SUBMSG_SUBACKMSG_UNSUBMSG_PUBMSG_PUBRESPMSG_ROUTEPUBMSG_NEWROUTEMSG_REMOTEROUTEADDSUBMSG_REMOTEROUTEADDUNSUBMSG_CURALLROUTES"

var _MSGIDIndex = [...]uint8{0, 9, 17, 25, 38, 56, 72, 79, 89, 98, 105, 116, 128, 140, 161, 184, 200}

const _MSGIDLowerName = "msg_startmsg_pingmsg_pongmsg_handshakemsg_registerroutermsg_snapshotsubsmsg_submsg_subackmsg_unsubmsg_pubmsg_pubrespmsg_routepubmsg_newroutemsg_remoterouteaddsubmsg_remoterouteaddunsubmsg_curallroutes"

func (i MSGID) String() string {
	i -= 1
	if i < 0 || i >= MSGID(len(_MSGIDIndex)-1) {
		return fmt.Sprintf("MSGID(%d)", i+1)
	}
	return _MSGIDName[_MSGIDIndex[i]:_MSGIDIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MSGIDNoOp() {
	var x [1]struct{}
	_ = x[MSG_START-(1)]
	_ = x[MSG_PING-(2)]
	_ = x[MSG_PONG-(3)]
	_ = x[MSG_HANDSHAKE-(4)]
	_ = x[MSG_REGISTERROUTER-(5)]
	_ = x[MSG_SNAPSHOTSUBS-(6)]
	_ = x[MSG_SUB-(7)]
	_ = x[MSG_SUBACK-(8)]
	_ = x[MSG_UNSUB-(9)]
	_ = x[MSG_PUB-(10)]
	_ = x[MSG_PUBRESP-(11)]
	_ = x[MSG_ROUTEPUB-(12)]
	_ = x[MSG_NEWROUTE-(13)]
	_ = x[MSG_REMOTEROUTEADDSUB-(14)]
	_ = x[MSG_REMOTEROUTEADDUNSUB-(15)]
	_ = x[MSG_CURALLROUTES-(16)]
}

var _MSGIDValues = []MSGID{MSG_START, MSG_PING, MSG_PONG, MSG_HANDSHAKE, MSG_REGISTERROUTER, MSG_SNAPSHOTSUBS, MSG_SUB, MSG_SUBACK, MSG_UNSUB, MSG_PUB, MSG_PUBRESP, MSG_ROUTEPUB, MSG_NEWROUTE, MSG_REMOTEROUTEADDSUB, MSG_REMOTEROUTEADDUNSUB, MSG_CURALLROUTES}

var _MSGIDNameToValueMap = map[string]MSGID{
	_MSGIDName[0:9]:          MSG_START,
	_MSGIDLowerName[0:9]:     MSG_START,
	_MSGIDName[9:17]:         MSG_PING,
	_MSGIDLowerName[9:17]:    MSG_PING,
	_MSGIDName[17:25]:        MSG_PONG,
	_MSGIDLowerName[17:25]:   MSG_PONG,
	_MSGIDName[25:38]:        MSG_HANDSHAKE,
	_MSGIDLowerName[25:38]:   MSG_HANDSHAKE,
	_MSGIDName[38:56]:        MSG_REGISTERROUTER,
	_MSGIDLowerName[38:56]:   MSG_REGISTERROUTER,
	_MSGIDName[56:72]:        MSG_SNAPSHOTSUBS,
	_MSGIDLowerName[56:72]:   MSG_SNAPSHOTSUBS,
	_MSGIDName[72:79]:        MSG_SUB,
	_MSGIDLowerName[72:79]:   MSG_SUB,
	_MSGIDName[79:89]:        MSG_SUBACK,
	_MSGIDLowerName[79:89]:   MSG_SUBACK,
	_MSGIDName[89:98]:        MSG_UNSUB,
	_MSGIDLowerName[89:98]:   MSG_UNSUB,
	_MSGIDName[98:105]:       MSG_PUB,
	_MSGIDLowerName[98:105]:  MSG_PUB,
	_MSGIDName[105:116]:      MSG_PUBRESP,
	_MSGIDLowerName[105:116]: MSG_PUBRESP,
	_MSGIDName[116:128]:      MSG_ROUTEPUB,
	_MSGIDLowerName[116:128]: MSG_ROUTEPUB,
	_MSGIDName[128:140]:      MSG_NEWROUTE,
	_MSGIDLowerName[128:140]: MSG_NEWROUTE,
	_MSGIDName[140:161]:      MSG_REMOTEROUTEADDSUB,
	_MSGIDLowerName[140:161]: MSG_REMOTEROUTEADDSUB,
	_MSGIDName[161:184]:      MSG_REMOTEROUTEADDUNSUB,
	_MSGIDLowerName[161:184]: MSG_REMOTEROUTEADDUNSUB,
	_MSGIDName[184:200]:      MSG_CURALLROUTES,
	_MSGIDLowerName[184:200]: MSG_CURALLROUTES,
}

var _MSGIDNames = []string{
	_MSGIDName[0:9],
	_MSGIDName[9:17],
	_MSGIDName[17:25],
	_MSGIDName[25:38],
	_MSGIDName[38:56],
	_MSGIDName[56:72],
	_MSGIDName[72:79],
	_MSGIDName[79:89],
	_MSGIDName[89:98],
	_MSGIDName[98:105],
	_MSGIDName[105:116],
	_MSGIDName[116:128],
	_MSGIDName[128:140],
	_MSGIDName[140:161],
	_MSGIDName[161:184],
	_MSGIDName[184:200],
}

// MSGIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MSGIDString(s string) (MSGID, error) {
	if val, ok := _MSGIDNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MSGIDNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MSGID values", s)
}

// MSGIDValues returns all values of the enum
func MSGIDValues() []MSGID {
	return _MSGIDValues
}

// MSGIDStrings returns a slice of all String values of the enum
func MSGIDStrings() []string {
	strs := make([]string, len(_MSGIDNames))
	copy(strs, _MSGIDNames)
	return strs
}

// IsAMSGID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MSGID) IsAMSGID() bool {
	for _, v := range _MSGIDValues {
		if i == v {
			return true
		}
	}
	return false
}
