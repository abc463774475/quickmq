// Code generated by "enumer -type=clientFlag"; DO NOT EDIT.

package server

import (
	"fmt"
	"strings"
)

const (
	_clientFlagName_0      = "handshakereadOnly"
	_clientFlagLowerName_0 = "handshakereadonly"
	_clientFlagName_1      = "expectConnect"
	_clientFlagLowerName_1 = "expectconnect"
	_clientFlagName_2      = "closeConnection"
	_clientFlagLowerName_2 = "closeconnection"
)

var (
	_clientFlagIndex_0 = [...]uint8{0, 9, 17}
	_clientFlagIndex_1 = [...]uint8{0, 13}
	_clientFlagIndex_2 = [...]uint8{0, 15}
)

func (i clientFlag) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _clientFlagName_0[_clientFlagIndex_0[i]:_clientFlagIndex_0[i+1]]
	case i == 4:
		return _clientFlagName_1
	case i == 8:
		return _clientFlagName_2
	default:
		return fmt.Sprintf("clientFlag(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _clientFlagNoOp() {
	var x [1]struct{}
	_ = x[handshake-(1)]
	_ = x[readOnly-(2)]
	_ = x[expectConnect-(4)]
	_ = x[closeConnection-(8)]
}

var _clientFlagValues = []clientFlag{handshake, readOnly, expectConnect, closeConnection}

var _clientFlagNameToValueMap = map[string]clientFlag{
	_clientFlagName_0[0:9]:       handshake,
	_clientFlagLowerName_0[0:9]:  handshake,
	_clientFlagName_0[9:17]:      readOnly,
	_clientFlagLowerName_0[9:17]: readOnly,
	_clientFlagName_1[0:13]:      expectConnect,
	_clientFlagLowerName_1[0:13]: expectConnect,
	_clientFlagName_2[0:15]:      closeConnection,
	_clientFlagLowerName_2[0:15]: closeConnection,
}

var _clientFlagNames = []string{
	_clientFlagName_0[0:9],
	_clientFlagName_0[9:17],
	_clientFlagName_1[0:13],
	_clientFlagName_2[0:15],
}

// clientFlagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func clientFlagString(s string) (clientFlag, error) {
	if val, ok := _clientFlagNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _clientFlagNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to clientFlag values", s)
}

// clientFlagValues returns all values of the enum
func clientFlagValues() []clientFlag {
	return _clientFlagValues
}

// clientFlagStrings returns a slice of all String values of the enum
func clientFlagStrings() []string {
	strs := make([]string, len(_clientFlagNames))
	copy(strs, _clientFlagNames)
	return strs
}

// IsAclientFlag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i clientFlag) IsAclientFlag() bool {
	for _, v := range _clientFlagValues {
		if i == v {
			return true
		}
	}
	return false
}
